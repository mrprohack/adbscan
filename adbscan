#!/bin/bash

# ADBScan - Tool for scanning and managing Android devices via ADB
# This script provides various functions for finding and interacting with Android devices

# ANSI color codes for prettier output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage information
show_usage() {
	echo -e "${BLUE}ADBScan - Android Debug Bridge Scanner${NC}"
	echo ""
	echo -e "${YELLOW}Usage:${NC}"
	echo -e "  $0 ${GREEN}--install${NC}                         Install required dependencies"
	echo -e "  $0 ${GREEN}--shodan${NC} <directory> <max_jobs>   Scan using Shodan API"
	echo -e "  $0 ${GREEN}--masscan${NC} <directory> <max_jobs>  Scan using Masscan"
	echo -e "  $0 ${GREEN}--pipe${NC} <shell_command> <args>     Run command on all connected devices"
	echo -e "  cat file | $0 ${GREEN}--connect${NC} <max_jobs>   Connect to devices from stdin"
	echo -e "  $0 ${GREEN}--test${NC} <output_file>              Test connected devices and save working ones"
	echo -e "  $0 ${GREEN}--screenshot${NC}                      Take screenshots of all connected devices"
	echo ""
}

# Function to check if a command exists
check_command() {
	if ! command -v "$1" &>/dev/null; then
		echo -e "${RED}Error: $1 is not installed.${NC}"
		return 1
	fi
	return 0
}

# Function to check if ADB is installed
check_adb() {
	if ! check_command "adb"; then
		echo -e "${RED}Error: ADB is not installed. Run '$0 --install' first.${NC}"
		exit 1
	fi
}

# If no arguments provided, show usage
if [ $# -lt 1 ]; then
	show_usage
	exit 1
fi

# Process command line arguments
case "$1" in
	"--install")
		echo -e "${BLUE}Installing necessary packages...${NC}"
		sudo apt-get update
		sudo apt-get install -y libpcap0.8 libpcap0.8-dev libpcap-dev parallel masscan nmap nload adb

		# Check if pip is installed
		if ! check_command "pip"; then
			echo -e "${RED}Error: pip is not installed. Please install Python and pip.${NC}"
			exit 1
		fi
		echo -e "${BLUE}Installing Python packages...${NC}"
		pip install shodan
		echo -e "${GREEN}Installation complete.${NC}"
		;;

	"--shodan")
		# Check required arguments
		if [ $# -lt 3 ]; then
			echo -e "${RED}Error: Missing required arguments.${NC}"
			echo -e "Usage: $0 --shodan <directory_name> <max_parallel_jobs>"
			exit 1
		fi

		# Validate directory
		if [ -d "$2" ]; then
			echo -e "${RED}Error: Directory '$2' already exists. Please choose a different name.${NC}"
			exit 1
		fi

		# Check for shodan command
		if ! check_command "shodan"; then
			echo -e "${YELLOW}Try running: shodan init YOUR_API_KEY${NC}"
			exit 1
		fi

		# Check for adb command
		check_adb

		echo -e "${BLUE}Creating directory and starting Shodan scan...${NC}"
		mkdir -p "$2" && cd "$2" || {
			echo -e "${RED}Error: Failed to create directory '$2'${NC}"
			exit 1
		}

		# Run Shodan search
		echo -e "${BLUE}Running Shodan search for Android Debug Bridge...${NC}"
		shodan search --fields ip_str,port "Android Debug Bridge" >"$2_shodan.txt" || {
			echo -e "${RED}Error: Failed to run Shodan search${NC}"
			exit 1
		}

		# Process results
		echo -e "${BLUE}Processing results...${NC}"
		awk '{print $1 ":" $2}' "$2_shodan.txt" >"$2_ips_only.txt" || {
			echo -e "${RED}Error: Failed to process Shodan results${NC}"
			exit 1
		}

		# Connect to devices
		echo -e "${BLUE}Attempting to connect to ${GREEN}$(wc -l < "$2_ips_only.txt")${BLUE} devices with ${GREEN}$3${BLUE} parallel jobs...${NC}"
		cat "$2_ips_only.txt" | parallel -j "$3" timeout 10 adb connect {} 2>&1 | tee "$2_connect_log.txt"

		# Get working devices
		echo -e "${BLUE}Getting list of successfully connected devices...${NC}"
		adb devices | grep -v "offline" | grep "device$" | awk '{print $1}' >"$2_working.txt"
		
		# Report results
		CONNECTED=$(wc -l < "$2_working.txt")
		echo -e "${GREEN}Successfully connected to ${CONNECTED} devices.${NC}"
		echo -e "${BLUE}Connected devices saved to ${GREEN}$2_working.txt${NC}"

		# Disconnect all devices
		echo -e "${BLUE}Disconnecting from all devices...${NC}"
		adb disconnect
		echo -e "${GREEN}Shodan scan complete.${NC}"
		;;

	"--masscan")
		# Check required arguments
		if [ $# -lt 3 ]; then
			echo -e "${RED}Error: Missing required arguments.${NC}"
			echo -e "Usage: $0 --masscan <directory_name> <max_parallel_jobs>"
			exit 1
		fi

		# Validate directory
		if [ -d "$2" ]; then
			echo -e "${RED}Error: Directory '$2' already exists. Please choose a different name.${NC}"
			exit 1
		fi

		# Check for masscan command
		if ! check_command "masscan"; then
			exit 1
		fi

		# Check for adb command
		check_adb

		echo -e "${BLUE}Creating directory and starting masscan...${NC}"
		mkdir -p "$2" && cd "$2" || {
			echo -e "${RED}Error: Failed to create directory '$2'${NC}"
			exit 1
		}

		# Run masscan
		echo -e "${BLUE}Running masscan for port 5555 (ADB)...${NC}"
		echo -e "${YELLOW}Note: This might take some time depending on the scan range.${NC}"
		sudo masscan -p 5555 0.0.0.0/0 --exclude 255.255.255.255 --rate=10000 -oX "$2_masscan.xml" || {
			echo -e "${RED}Error: Failed to run masscan${NC}"
			exit 1
		}

		# Extract IP addresses
		echo -e "${BLUE}Processing scan results...${NC}"
		grep -oE 'addr="([0-9]{1,3}\.){3}[0-9]{1,3}"' "$2_masscan.xml" | cut -d'"' -f2 | awk '{print $1 ":5555"}' >"$2_ips_only.txt" || {
			echo -e "${RED}Error: Failed to extract IP addresses${NC}"
			exit 1
		}

		# Connect to devices
		echo -e "${BLUE}Attempting to connect to ${GREEN}$(wc -l < "$2_ips_only.txt")${BLUE} devices with ${GREEN}$3${BLUE} parallel jobs...${NC}"
		cat "$2_ips_only.txt" | parallel -j "$3" timeout 10 adb connect {} 2>&1 | tee "$2_connect_log.txt"

		# Get working devices
		echo -e "${BLUE}Getting list of successfully connected devices...${NC}"
		adb devices | grep -v "offline" | grep "device$" | awk '{print $1}' >"$2_working.txt"
		
		# Report results
		CONNECTED=$(wc -l < "$2_working.txt")
		echo -e "${GREEN}Successfully connected to ${CONNECTED} devices.${NC}"
		echo -e "${BLUE}Connected devices saved to ${GREEN}$2_working.txt${NC}"

		# Disconnect all devices
		echo -e "${BLUE}Disconnecting from all devices...${NC}"
		adb disconnect
		echo -e "${GREEN}Masscan scan complete.${NC}"
		;;

	"--pipe")
		# Check required arguments
		if [ $# -lt 3 ]; then
			echo -e "${RED}Error: Missing required arguments.${NC}"
			echo -e "Usage: $0 --pipe <shell_command> <args>"
			exit 1
		fi

		# Check for adb command
		check_adb

		# Get connected devices
		DEVICES=$(adb devices | grep "device$" | grep -v "devices" | cut -f 1)
		if [ -z "$DEVICES" ]; then
			echo -e "${RED}Error: No devices connected.${NC}"
			exit 1
		fi

		echo -e "${BLUE}Running command '$2 $3' on all connected devices...${NC}"
		echo "$DEVICES" | parallel -j 5 echo -e "${GREEN}Device: {}\n${BLUE}Output:${NC}" \; adb -s {} $2 $3
		echo -e "${GREEN}Command execution complete.${NC}"
		;;

	"--connect")
		# Check required arguments
		if [ $# -lt 2 ]; then
			echo -e "${RED}Error: Missing required arguments.${NC}"
			echo -e "Usage: cat file | $0 --connect <max_parallel_jobs>"
			exit 1
		fi

		# Check for adb command
		check_adb

		# Check if there's input from stdin
		if [ -t 0 ]; then
			echo -e "${RED}Error: No input from stdin. Usage: cat file | $0 --connect <max_parallel_jobs>${NC}"
			exit 1
		fi

		echo -e "${BLUE}Connecting to devices with ${GREEN}$2${BLUE} parallel jobs...${NC}"
		parallel -j "$2" timeout 10 adb connect {}
		
		# Get connected devices
		CONNECTED=$(adb devices | grep "device$" | grep -v "devices" | wc -l)
		echo -e "${GREEN}Successfully connected to ${CONNECTED} devices.${NC}"
		;;

	"--test")
		# Check required arguments
		if [ $# -lt 2 ]; then
			echo -e "${RED}Error: Missing required arguments.${NC}"
			echo -e "Usage: $0 --test <output_file>"
			exit 1
		fi

		# Check for adb command
		check_adb

		# Get connected devices
		DEVICES=$(adb devices | grep "device$" | grep -v "devices" | cut -f 1)
		if [ -z "$DEVICES" ]; then
			echo -e "${RED}Error: No devices connected.${NC}"
			exit 1
		fi

		echo -e "${BLUE}Testing connection to all devices and saving working ones to '$2'...${NC}"
		rm -f "$2" # Remove output file if it exists

		for device in $DEVICES; do
			echo -e "${BLUE}Testing device: ${GREEN}$device${NC}"
			if timeout 5 adb -s "$device" shell id >/dev/null 2>&1; then
				echo -e "  ${GREEN}✓ Success${NC}"
				echo "$device" >> "$2"
			else
				echo -e "  ${RED}✗ Failed${NC}"
			fi
		done

		WORKING=$(wc -l < "$2" 2>/dev/null || echo 0)
		echo -e "${GREEN}Test complete. $WORKING working devices saved to '$2'.${NC}"
		;;

	"--screenshot")
		# Check for adb command
		check_adb

		# Get connected devices
		DEVICES=$(adb devices | grep "device$" | grep -v "devices" | cut -f 1)
		if [ -z "$DEVICES" ]; then
			echo -e "${RED}Error: No devices connected.${NC}"
			exit 1
		fi

		# Create screenshots directory if it doesn't exist
		mkdir -p screenshots
		echo -e "${BLUE}Taking screenshots of all connected devices...${NC}"
		
		for device in $DEVICES; do
			echo -e "${BLUE}Taking screenshot of device: ${GREEN}$device${NC}"
			adb -s "$device" exec-out screencap -p > "screenshots/${device//:/\_}.png"
			echo -e "  ${GREEN}✓ Saved to screenshots/${device//:/\_}.png${NC}"
		done
		
		echo -e "${GREEN}Screenshots captured for all devices.${NC}"
		;;

	*)
		echo -e "${RED}Invalid option: $1${NC}"
		show_usage
		exit 1
		;;
esac

exit 0
